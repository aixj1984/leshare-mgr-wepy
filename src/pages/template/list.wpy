<template>
  <repeat for="{{templates}}" key="index" index="index" item="item">
      <!--处理select-->
      <Template :template.sync="item" @select.user="select"/>
  </repeat>

  <Placeholder :show.sync="empty" />
  <!--占位符-->
  <view class="box"></view>
  <!--编辑栏-->
  <view class="row-between edit-box">
    <view class="select-box row" @tap.stop="checkAll">
      <icon class="weui-icon-checkbox_{{!checked ? 'circle':'success'}}" type="{{!checked ? 'circle':'success'}}" size="23"></icon>
      <text class="ml20">全选</text>
    </view>
    <!--不要传递参数-->
    <view class="zan-btn zan-btn--small delete-box" @tap.stop="remove({{template}})">删除</view>
  </view>
</template>

<script>
  import wepy from 'wepy';
  import base from '../../mixins/base';
  import open from '../../api/open';
  import Template from '../../components/open/template';
  import Event from '../../utils/Event';
  import Tips from '../../utils/Tips';
  import Placeholder from '../../components/common/placeholder';

  export default class TemplateList extends wepy.page {
    data = {
      templates: null,
      empty: true
    };
    async onLoad () {
      await this.doLoad();
      Event.listen(Event.TEMPLATE_LIST_UPDATE, this.doLoad.bind(this), this);
    };
    async doLoad() {
      try {
        this.templates = await open.templates();
        this.empty = this.templates.length < 1;
      } catch (e) {
        this.templates = [];
        this.empty = true;
        console.error(e);
      } finally {
        this.loaded();
      }
    }
    async onPullDownRefresh () {
      await this.doLoad();
      wepy.stopPullDownRefresh();
    }
    methods = {
      // 获取到所有被选择的,filter过滤所有标志位为true的
      // 如果什么都没选 提示用户选择，return
      async remove() {
        const templates = this.templates.filter(item => item.check == true);
        if (templates == null || templates.length < 1) {
          Tips.alert('请选择');
          return;
        }
        // 执行正常的流程
        await Tips.confirm('确定要删除该模板吗？');
        // 传第一步获取到的已选择的数组
        await open.deleteTemplate(templates);
        await Tips.success('删除成功');
        await this.doLoad();
      },
      // 参数为模板ID
      select(id) {
        // 使用find方法找到templates对应的那个项目
        const template = this.templates.find(item => item.template_id == id);
        // 把标志位取反
        template.check = !template.check
      },
      checkAll() {
        const checked = !this.checked;
        this.templates.forEach(item => {
          item.check = checked;
        })
      }
    };
    computed = {
      checked() {
        if (this.templates == null) return;
        return this.templates.every(item => item.check);
      }
    };
    components = {
      Template: Template,
      Placeholder: Placeholder
    };
    mixins = [base];
    config = {
      navigationBarTitleText: '模板列表',
      enablePullDownRefresh: true
    };
  }
</script>

<style lang="scss">
  @import "../../styles/variable";
  .box{
    height: rpx(100);
  }
  .edit-box{
    height: rpx(50);
    position: fixed;
    bottom: 0;
    padding: rpx(20) 0;
    background-color: white;
    border-top: $border;
    border-bottom: $border;
    width: 100%;
  }
  .select-box{
    margin-left: rpx(20);
  }
  .delete-box{
    margin-right: rpx(20);
  }
</style>
